***Misc copy & paste things***

00 */12 * * 1-6 /usr/local/bin/node /Users/mitch/repos/podcast-db/scripts/addFeedsToBeParsedForRecentEpisodes.js
* 0 * * 7 /usr/local/bin/node /Users/mitch/repos/podcast-db/scripts/addFeedsToBeParsedForMaxEpisodes.js
* 12 * * 7 /usr/local/bin/node /Users/mitch/repos/podcast-db/scripts/addFeedsToBeParsedForRecentEpisodes.js
*/5 * * * * /usr/local/bin/node /Users/mitch/repos/podcast-db/scripts/parseNextFeedFromQueue.js

---

node -e 'let params = {}; params.shouldParseMaxEpisodes = true; require("./src/tasks/feedParser.js").parseFeedIfHasBeenUpdated("http://feeds.feedburner.com/TheAdamCarollaPodcast", params); require("./src/tasks/feedParser.js").parseFeedIfHasBeenUpdated("http://joeroganexp.joerogan.libsynpro.com/rss", params); require("./src/tasks/feedParser.js").parseFeedIfHasBeenUpdated("http://feeds.feedburner.com/dancarlin/commonsense?format=xml", params)'

---

node -e 'require("./src/tasks/feedParser.js").parseFeedIfHasBeenUpdated("http://feeds.feedburner.com/DuncanTrussell"); require("./src/tasks/feedParser.js").parseFeedIfHasBeenUpdated("http://joeroganexp.joerogan.libsynpro.com/rss"); require("./src/tasks/feedParser.js").parseFeedIfHasBeenUpdated("http://feeds.feedburner.com/dancarlin/commonsense")'

---

DROP SCHEMA public CASCADE;
CREATE SCHEMA public;

---

INSERT INTO podcasts (id, "feedURL", "dateCreated", "lastUpdated") VALUES ('86ffe906aeb64200b5373c0a1b1df88c', 'http://feeds.feedburner.com/TheAdamCarollaPodcast', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

---

SELECT p.title, p."imageURL", p.id, (
  SELECT count(id) FROM episodes WHERE "podcastId"=p.id
) AS "episodeCount", (
  SELECT MAX("pubDate") FROM episodes WHERE "podcastId"=p.id
) AS "lastEpisodePubDate"
FROM podcasts p, users u
WHERE u.id='${id}'
AND u."subscribedPodcastFeedURLs" @> ARRAY[p."feedURL"]::text[];

---

config.queueUrl = '<put your queue here>';
